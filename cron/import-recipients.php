<?php

require_once __DIR__ . "/../boot.php";

use Access2Me\Model;
use Access2Me\Helper;

/**
 * Import recipients from Gmail's Sent folder into the user's whitelist
 */

class RecipientsImporter
{
    private $user;

    /**
     *
     * @var \Access2Me\Helper\GmailImapStorage;
     */
    private $gmailStorage;

    private $userSenderRepo;

    public function __construct($user, $gmailStorage, $userSenderRepo)
    {
        $this->user = $user;
        $this->gmailStorage = $gmailStorage;
        $this->userSenderRepo = $userSenderRepo;
    }

    /**
     * Checks if the recipient of this message should be imported
     * @param \Zend\Mail\Storage\Message $message
     */
    public function isSuitable(\Zend\Mail\Storage\Message $message)
    {
        // check subject
        $headers = $message->getHeaders();
        if ($headers->has('Subject')) {
            $subject = $headers->get('Subject');

            if (stripos($subject->getFieldValue(), 'unsubscribe') !== false) {
                return false;
            }
        }

        // check body
        $body = $message->getContent();
        if (stripos($body, 'This message was automatically generated by Gmail.') !== false) {
            return false;
        }
        
        return true;
    }

    public function import()
    {
        // open sent folder
        $this->gmailStorage->selectFolder($this->gmailStorage->getFolderName(Helper\StorageFolder::SENT));

        // loop through messages
        foreach ($this->gmailStorage as $message) {
            $headers = $message->getHeaders();

            // check if recipient should be imported
            if (!$this->isSuitable($message)) {
                Logging::getLogger()->debug('Not importing recipient: msgid=' . $headers->get('Message-ID'));
                continue;
            }

            if (!$headers->has('To')) {
                continue;
            }

            // add recipient addr to whitelist
            $to = $headers->get('To');
            foreach ($to->getAddressList() as $address) {
                $email = $address->getEmail();

                $entry = $this->userSenderRepo->getByUserAndSender($this->user['id'], $email);
                // create whitelisted entry if it doesn't exist
                if ($entry == null) {
                    $entry = [
                        'user_id' => $this->user['id'],
                        'sender' => $email,
                        'type' => Model\UserSenderRepository::TYPE_EMAIL,
                        'access' => Model\UserSenderRepository::ACCESS_ALLOWED
                    ];
                    $this->userSenderRepo->save($entry);
                }
            }
        }
    }
}

$db = new Database;
$userRepo = new Model\UserRepository($db);
$authProvider = new Helper\GoogleAuthProvider($appConfig['services']['google'], $userRepo);

foreach ($userRepo->findAll() as $user) {
    try {
        $googleAuth = $authProvider->getAuth($user['username']);
        $storage = Helper\GmailImapStorage::getImapStorage($googleAuth);
        
        if ($storage == null) {
            Logging::getLogger()->info('Can\'t get storage handle for user: ' . $user['id']);
            continue;
        }

        $userSenderRepo = new Model\UserSenderRepository($db);

        // import
        $importer = new RecipientsImporter($user, $storage, $userSenderRepo);
        $importer->import();
        
        $storage->close();
    } catch (Exception $ex) {
        Logging::getLogger()->error('Whitelisting senders of user: ' . $user['id'], ['exception' => $ex]);
    }
}

